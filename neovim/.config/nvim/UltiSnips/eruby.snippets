extends html

# TextMate added these variables to cope with changes in ERB handling
# in different versions of Rails -- for instance, Rails 3 automatically
# strips whitespace so that it's no longer necessary to use a form like
# <% end -%>, but if you're still maintaining Rails 2 projects, you
# can't omit the minus sign and get the same behavior.
#
# The following regex replace substitutes the function below for the
# TextMate variable references after the snippets are converted:
#
#   /\v\$\{(TM_RAILS_TEMPLATE_([^_]+)_RUBY_([^_\s]+))\}/`!p textmate_var('\1', snip)`/g
#
global !p
def textmate_var(var, snip):
	lookup = dict(
		TM_RAILS_TEMPLATE_START_RUBY_EXPR = snip.opt('g:tm_rails_template_start_ruby_expr', '<%= '),
		TM_RAILS_TEMPLATE_END_RUBY_EXPR = snip.opt('g:tm_rails_template_end_ruby_expr', ' %>'),
		TM_RAILS_TEMPLATE_START_RUBY_INLINE = snip.opt('g:tm_rails_template_start_ruby_inline', '<% '),
		TM_RAILS_TEMPLATE_END_RUBY_INLINE = snip.opt('g:tm_rails_template_end_ruby_inline', ' %>'),
		TM_RAILS_TEMPLATE_END_RUBY_BLOCK = '<% end %>'
	)
	snip.rv = lookup[var]
	return
endglobal

snippet % "<% ${0} %>"
<% ${0} %>
endsnippet

snippet = "<%= ${0} %>"
<%= ${0} %>
endsnippet

snippet render "<%= render ${0} %>" b
<%= render ${0} %>
endsnippet

snippet lt "link_to"
<%= link_to "${1}", ${2} %>
endsnippet

snippet yield "yield"
<%= yield ${1::content_symbol} %>
endsnippet

snippet cf "content_for" b
<% content_for :${1:head} do %>
	${0}
<% end %>
endsnippet

snippet ff "form_for" b
<%= form_for ${1:model} do |f| %>
	${0}
<% end %>
endsnippet

snippet sff "simple_form_for" b
<%= simple_form_for ${1:model} do |f| %>
	${0}
<% end %>
endsnippet

snippet t "<%= t ... %>" b
<%= t "${0}" %>
endsnippet

snippet css "stylesheet_link_tag" b
<%= stylesheet_link_tag "${0}" %>
endsnippet

snippet js "javascript_include_tag" b
<%= javascript_include_tag ${0} %>
endsnippet

snippet if "if...end" b
<% if ${1} %>
	${0}
<% end %>
endsnippet

snippet ife "if...else...end" b
<% if ${1} %>
	${2}
<% else %>
	${0}
<% end %>
endsnippet

snippet else "else (ERB)" b
<% else %>
	$0
endsnippet

snippet unless "unless...end" b
<% unless ${1} %>
	${0}
<% end %>
endsnippet

snippet end "<% end %>" b
<% end %>
endsnippet

snippet debug "<%= debug ${0} %>" b
<%= debug ${0} %>
endsnippet

snippet cfdebug "<% content_for :debug %>" b
<% content_for :debug do %>
	<%= debug ${0} %>
<% end %>
endsnippet

# vim:set noet sts=4 sw=4 ts=4 ft=snippets:
