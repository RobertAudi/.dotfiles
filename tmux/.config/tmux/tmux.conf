# Whether or not we're inside vim
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

set-option -gq default-shell $SHELL

# For macOS only
# https://github.com/ChrisJohnsen/tmux-MacOSX-pasteboard
set-option -gq default-command "reattach-to-user-namespace -l ${SHELL}"

# Default terminal
set-option -g default-terminal "tmux-256color"

# Enable TrueColor
set-option -sa terminal-overrides ",tmux-256color:Tc,alacritty:RGB,xterm-256color:RGB"

# Add undercurl support
set-option -sa terminal-overrides ',*:Smulx=\E[4::%p1%dm'

# - Add colors to underscore/undercurl inside neovim [source: https://github.com/folke/tokyonight.nvim#making-undercurls-work-properly-in-tmux]
set-option -sa terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'

# Options {{{
# ------------------------------------------------------------------------------

# Don't set terminal titles automatically
set-option -g set-titles off

# Immediate escape
set-option -sg escape-time 1

# Show status line messages for 4 second
set-option -g display-time 4000

# Show pane numbers for 2 second
set -g display-panes-time 2000

# Don't show a message for any activity type
set-option -g visual-activity off
set-option -g visual-bell     off
set-option -g visual-silence  off
set-option -g bell-action     none

# Matrix screensaver
set-option -g lock-after-time 600
set-option -g lock-command "cmatrix -abfs"
set-option -g monitor-silence 0
set-option -g silence-action current

# FocusGained and FocusLost autocommand events for vim + Tmux.
set-option -g focus-events on

# don't detach tmux when killing a session
set-option -g detach-on-destroy off

# Set window notifications
# Watch for activity in windows and highlight in status bar
set-window-option -g monitor-activity on

# Base index
set-option        -g base-index      1
set-window-option -g pane-base-index 1
set-option -g renumber-windows on

# History
set-option -g history-limit 30000

# Rename windows automatically
set-window-option -g automatic-rename on

# The Mouse
set-option -g -q mouse on

# Vi mode
set-window-option -g mode-keys vi

# Wrap search
set-window-option -g wrap-search on

# ------------------------------------------------------------------------------ }}}

# Status bar {{{
# ------------------------------------------------------------------------------

set-option -g status on
set-option -g status-position bottom

# @see https://github.com/tmux/tmux/issues/108
set-option -g status-interval 0

# ------------------------------------------------------------------------------ }}}

# Key bindings {{{
# ------------------------------------------------------------------------------

# remove all keybindings
unbind-key -a  -T root
unbind-key -a  -T prefix
unbind-key -a  -T copy-mode-vi

# The prefix
set-option -g prefix C-s

# List key bindings
bind-key -T prefix ? list-keys

# Open the command prompt
bind-key -T prefix : command-prompt

# Detach client
bind-key -T prefix d detach-client

# Copy & paste {{{
# ------------------------------------------------------------------------------

# Enter copy-mode except if inside vim
bind-key -T prefix Escape if-shell "$is_vim" "send-keys Escape"  "copy-mode"

# Exit copy-mode
bind-key -T copy-mode-vi q   send-keys -X cancel

# Start selection
bind-key -T copy-mode-vi v send-keys -X begin-selection

# Start line-wise selection
bind-key -T copy-mode-vi V send-keys -X select-line

# Start block-wise selection
bind-key -T copy-mode-vi C-v send-keys -X rectangle-toggle

# Stop selection (ie: exit visual mode)
bind-key -T copy-mode-vi Escape send-keys -X clear-selection

# Drag the mouse on any pane to start selection
bind-key -T copy-mode-vi MouseDrag1Pane select-pane \; send-keys -X begin-selection

# Go to a pane by clicking on it and then stop selection
bind-key -T copy-mode-vi MouseDown1Pane select-pane \; send-keys -X clear-selection

# Double click (mouse) to select word
bind-key -T copy-mode-vi DoubleClick1Pane select-pane \; send-keys -X select-word

# Triple click (mouse) to select line
bind-key -T copy-mode-vi TripleClick1Pane select-pane \; send-keys -X select-line

# Movements (same as vim) {{{
# ------------------------------------------------------------------------------

bind-key -T copy-mode-vi  h  send-keys -X cursor-left
bind-key -T copy-mode-vi  j  send-keys -X cursor-down
bind-key -T copy-mode-vi  k  send-keys -X cursor-up
bind-key -T copy-mode-vi  l  send-keys -X cursor-right

bind-key -T copy-mode-vi  b  send-keys -X previous-word
bind-key -T copy-mode-vi  B  send-keys -X previous-space

bind-key -T copy-mode-vi  e  send-keys -X next-word-end
bind-key -T copy-mode-vi  E  send-keys -X next-space-end

bind-key -T copy-mode-vi  w  send-keys -X next-word
bind-key -T copy-mode-vi  W  send-keys -X next-space

bind-key -T copy-mode-vi  g  send-keys -X history-top
bind-key -T copy-mode-vi  G  send-keys -X history-bottom

bind-key -T copy-mode-vi C-u send-keys -X halfpage-up
bind-key -T copy-mode-vi C-d send-keys -X halfpage-down

bind-key -T copy-mode-vi  0  send-keys -X start-of-line
bind-key -T copy-mode-vi  ^  send-keys -X back-to-indentation
bind-key -T copy-mode-vi '$' send-keys -X end-of-line

bind-key -T copy-mode-vi  H  send-keys -X back-to-indentation
bind-key -T copy-mode-vi  L  send-keys -X end-of-line

bind-key -T copy-mode-vi  /  command-prompt -p "(search down)" "send -X search-forward \"%%%\""
bind-key -T copy-mode-vi  ?  command-prompt -p "(search up)" "send -X search-backward \"%%%\""

bind-key -T copy-mode-vi  n  send-keys -X search-again
bind-key -T copy-mode-vi  N  send-keys -X search-reverse

# Scroll up & down (stop selection)
bind-key -T copy-mode-vi WheelUpPane   select-pane \; send-keys -X clear-selection \; send-keys -X -N 5 scroll-up
bind-key -T copy-mode-vi WheelDownPane select-pane \; send-keys -X clear-selection \; send-keys -X -N 5 scroll-down

# Enter copy-mode then Scroll up & down
bind-key -T root WheelUpPane   if-shell -F -t "{mouse}" "#{alternate_on}" "send-keys -M" "select-pane -t \"{mouse}\"; copy-mode; send-keys -M"
bind-key -T root WheelDownPane if-shell -F -t "{mouse}" "#{alternate_on}" "send-keys -M" "select-pane -t \"{mouse}\"; send-keys -M"

# Unless inside of vim, enter copy-mode and start selection in any pane
bind-key -T root MouseDrag1Pane if-shell "$is_vim" "send-keys -M MouseDrag1Pane" "if-shell -F -t \"{mouse}\" \"#{mouse_any_flag}\" \"if-shell -F -t \"{mouse}\" '#{pane_in_mode}' 'copy-mode -M' 'send-keys -M\" \"copy-mode -M\""

# ------------------------------------------------------------------------------ }}}

# Copy selection and exit copy mode
bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"

# Copy selection and stay in copy mode
bind-key -T copy-mode-vi Y send-keys -X copy-pipe "reattach-to-user-namespace pbcopy"

# Open selection
bind-key -T copy-mode-vi o send-keys -X copy-pipe-and-cancel "xargs open"

# Open selection in the background
bind-key -T copy-mode-vi O send-keys -X copy-pipe-and-cancel "xargs open --background"

# ------------------------------------------------------------------------------ }}}

# Sessions, Windows & Panes {{{
# ------------------------------------------------------------------------------

# Move windows
bind-key -r S-Left  swap-window -t -1
bind-key -r S-Right swap-window -t +1

# Switch session
bind-key -T prefix C-Space split-window -v -l 10 "tmux-switch-session"

# Run Jaime
bind-key -T prefix Space split-window -c "#{pane_current_path}" -v -l 20 "jaime"

# Rename the current window
bind-key -T prefix , display-message "Use r to rename windows!"
bind-key -T prefix r command-prompt -p "rename window:" "rename-window -- '%%'"

# Rename the current session
bind-key -T prefix R command-prompt -p "rename session:" "rename-session -- '%%'"

# Splits {{{
# ------------------------------------------------------------------------------

# Vertical split
bind-key _ split-window -v

# Horizontal split
bind-key | split-window -h

# Switch pane, ignoring Vim splits
bind-key -r -T prefix h select-pane -L
bind-key -r -T prefix j select-pane -D
bind-key -r -T prefix k select-pane -U
bind-key -r -T prefix l select-pane -R
bind-key -r -T prefix '\' select-pane -l

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
bind-key -n 'C-\' if-shell "$is_vim" "send-keys 'C-\\'" "select-pane -l"

# ------------------------------------------------------------------------------ }}}

# resize panes like vim
# feel free to change the "1" to however many lines you want to resize by, only
# one at a time can be slow
bind-key -r < resize-pane -L 2
bind-key -r > resize-pane -R 2
bind-key -r - resize-pane -D 2
bind-key -r + resize-pane -U 2

# Resize panes by dragging the borders with the mouse
bind-key -T root MouseDrag1Border resize-pane -M

# Focus/Unfocus current pane
bind-key C-s resize-pane -Z
bind-key -T root DoubleClick1Pane resize-pane -Z -t "{mouse}"

# New window
bind-key -T prefix c new-window

# Go to window by number
bind-key -T prefix 1 select-window -t :=1
bind-key -T prefix 2 select-window -t :=2
bind-key -T prefix 3 select-window -t :=3
bind-key -T prefix 4 select-window -t :=4
bind-key -T prefix 5 select-window -t :=5
bind-key -T prefix 6 select-window -t :=6
bind-key -T prefix 7 select-window -t :=7
bind-key -T prefix 8 select-window -t :=8
bind-key -T prefix 9 select-window -t :=9

# Go to a pane by clicking on it
bind-key -T root MouseDown1Pane select-pane -t "{mouse}" \; send-keys -M

# Next/Previous window
bind-key -r C-n next-window
bind-key -r C-p previous-window

# Go to a window by clicking on the status bar
bind-key -T root MouseDown1Status  select-window -t "{mouse}"

# Last window
bind-key o last-window

# Move pane to separate window
bind-key -T prefix * break-pane

# ------------------------------------------------------------------------------ }}}

# source .tmux.conf file
bind-key C-r source-file ~/.config/tmux/tmux.conf \; display-message " ✱ tmux.conf is reloaded"

# Look up in a man-page
bind-key m command-prompt -p "Man:" "split-window 'man %%'"

# Clear fix
bind-key C-k send-keys "C-k"
bind-key C-l send-keys "C-l"

# ------------------------------------------------------------------------------ }}}

# Appearance {{{
# ------------------------------------------------------------------------------

source-file $XDG_DATA_HOME/tmux/themes/0x2a.tmux

# ------------------------------------------------------------------------------ }}}

# Plugins {{{
# ------------------------------------------------------------------------------

run-shell $XDG_DATA_HOME/tmux/plugins/prefix_highlight.sh
run-shell $XDG_DATA_HOME/tmux/plugins/direnv.sh

# ------------------------------------------------------------------------------ }}}

# Modeline {{{
# vim: set foldmarker={{{,}}} foldlevel=0 foldmethod=marker : }}}
