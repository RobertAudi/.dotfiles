# Config {{{
# ------------------------------------------------------------------------------

[core]
  # Treat spaces before tabs and all kinds of trailing whitespace as an error
  # [default] trailing-space: looks for spaces at the end of a line
  # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
  whitespace = space-before-tab,-indent-with-non-tab,trailing-space

  # Make `git rebase` safer on macOS
  # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
  trustctime = false

  # Prevent showing files whose names contain non-ASCII symbols as unversioned.
  # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
  precomposeUnicode = false

  # Speed up commands involving untracked files such as `git status`.
  # https://git-scm.com/docs/git-update-index#_untracked_cache
  untrackedCache = true

  # Read the commit-graph file (if it exists) to parse the graph structure of commits.
  commitGraph = true

  # Awesome table describing this config:
  #
  # ┌───────────────┬──────────────┬──────────────┬──────────────┐
  # │ core.autocrlf │     false    │     input    │     true     │
  # ├───────────────┼──────────────┼──────────────┼──────────────┤
  # │               │ LF   => LF   │ LF   => LF   │ LF   => LF   │
  # │ git commit    │ CR   => CR   │ CR   => CR   │ CR   => CR   │
  # │               │ CRLF => CRLF │ CRLF => LF   │ CRLF => LF   │
  # ├───────────────┼──────────────┼──────────────┼──────────────┤
  # │               │ LF   => LF   │ LF   => LF   │ LF   => CRLF │
  # │ git checkout  │ CR   => CR   │ CR   => CR   │ CR   => CR   │
  # │               │ CRLF => CRLF │ CRLF => CRLF │ CRLF => CRLF │
  # └───────────────┴──────────────┴──────────────┴──────────────┘
  #
  # Credits to @pratt for his answer on StackOverflow:
  #   https://stackoverflow.com/a/41282375/123016
  autocrlf = input
  safecrlf = warn

[init]
  defaultBranch = main

[user]
  useConfigOnly = true

[web]
  browser = open

[advice]
  statusHints = false
  detachedHead = false

[rerere]
  enabled = true
  autoUpdate = true

[pretty]
  default  = %Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset
  detailed = %C(bold)%C(yellow)Commit:%C(reset) %C(yellow)%H%C(red)%d%n%C(bold)%C(yellow)Author:%C(reset) %C(cyan)%an <%ae>%n%C(bold)%C(yellow)Date:%C(reset)   %C(blue)%ai (%ar)%C(reset)%n%+B

[format]
  pretty = default

# ------------------------------------------------------------------------------ }}}

# Colors {{{
# ------------------------------------------------------------------------------

[color]
  branch = auto
  diff   = auto
  status = auto

  interactive = auto
  showBranch  = auto

  grep  = true
  pager = true
  ui    = true

[color "branch"]
  current  = bold reverse yellow
  local    = yellow
  upstream = magenta
  remote   = bold magenta

[color "status"]
  added     = yellow
  changed   = green
  untracked = cyan

[color "diff"]
  meta = bold yellow
  frag = bold magenta
  old  = bold red
  new  = bold green
  whitespace = red reverse
  commit = blue

# ------------------------------------------------------------------------------ }}}

# Commands {{{
# ------------------------------------------------------------------------------

[status]
  showUntrackedFiles = all
  submoduleSummary = true

[branch]
  autoSetupRebase = always

[commit]
  verbose = true

[stash]
  showStat = true
  showPatch = true

[fetch]
  prune = true
  recurseSubmodules = true
  fsckObjects = false

[push]
  # change to maching for machines with older versions of git 1.x.x
  default = current

  # Make `git push` push relevant annotated tags when pushing branches out.
  followTags = true

[pull]
  prune = true
  rebase = merges

[rebase]
  autoSquash = true
  autoStash = true
  stat = true
  abbreviateCommands = false

[submodule]
  fetchJobs = 8

[blame]
  date = short

[gc]
  writeCommitGraph = true

[help]
  # Don't correct and execute mistyped commands automatically.
  autoCorrect = 0

# merge {{{
# ------------------------------------------------------------------------------

[merge]
  summary = true

  # Include summaries of merged commits in newly created merge commit messages
  log = true
  stat = true

[mergetool]
  keepBackup = true
  prompt = false

# Source: https://github.com/jeromedalbert/dotfiles/blob/d96fdc669cc2409f8511ab744ab22424ec2e2d41/.gitconfig#L25-L27
[merge "bundlelock"]
  name = bundle lock
  driver = bundle lock

# Source: https://github.com/jeromedalbert/dotfiles/blob/d96fdc669cc2409f8511ab744ab22424ec2e2d41/.gitconfig#L29-L38
[merge "railsschema"]
  name = newer Rails schema version
  driver = "ruby -e '\n\
    system %(git), %(merge-file), %(--marker-size=%L), %(%A), %(%O), %(%B)\n\
    b = File.read(%(%A))\n\
    b.sub!(/^<+ .*\\nActiveRecord::Schema\\.define.version: ([0-9_]+). do\\n=+\\nActiveRecord::Schema\\.define.version: ([0-9_]+). do\\n>+ .*/) do\n\
      %(ActiveRecord::Schema.define(version: #{[$1, $2].max}) do)\n\
    end\n\
    File.open(%(%A), %(w)) {|f| f.write(b)}\n\
    exit 1 if b.include?(%(<)*%L)'"


# ------------------------------------------------------------------------------ }}}

# diff {{{
# ------------------------------------------------------------------------------

[diff]
  # Git diff will use (i)ndex, (w)ork tree, (c)ommit and (o)bject
  # instead of a/b/c/d as prefixes for patches
  mnemonicPrefix = true
  algorithm = histogram

  ignoreSubmodules = all

  # Detect copies as well as renames
  renames = copies

  indentHeuristic = true

  # https://git-scm.com/docs/git-diff#git-diff---color-movedltmodegt
  colorMoved = default

[diff "bin"]
  # Use `hexdump` to diff binary files
  textconv = hexdump -v -C

[diff "xml"]
  textconv = xmllint --format --recover

[diff "ruby"]
  funcname = ^ *\\(\\(class\\|module\\|def\\) .*\\)

[diff "rspec"]
  funcname = ^ *\\(\\(\\(RSpec\\.\\)\\?describe\\|context\\) .*\\)

[difftool]
  prompt = false

# ------------------------------------------------------------------------------ }}}

# ------------------------------------------------------------------------------ }}}

# Aliases {{{
# ------------------------------------------------------------------------------

[alias]
  # log
  l   = log --topo-order --graph --abbrev-commit
  la  = log --topo-order --graph --abbrev-commit --branches --tags
  laa = log --topo-order --graph --abbrev-commit --branches --tags --all
  ld  = log --topo-order --stat --patch --full-diff --pretty=detailed

  show-tree = log --all --graph --decorate --oneline --simplify-by-decoration

  # Stolen from https://github.com/posquit0/dotfiles
  #   https://github.com/posquit0/dotfiles/blob/ef942a01566abfe7874e99bf6dbbfa3e3611e36d/git/.gitconfig#L48-L53
  today     = log --topo-order --graph --abbrev-commit --since=midnight
  yesterday = log --topo-order --graph --abbrev-commit --since=yesterday --until=midnight

  # See only the commits (with diff) that have arrived since the last pull.
  #
  # Stolen from http://chneukirchen.org/dotfiles
  #   http://chneukirchen.org/dotfiles/.gitconfig
  #   http://chneukirchen.org/blog/archive/2013/01/a-grab-bag-of-git-tricks.html
  news = log -p @{1}..

  # Source:
  #   https://github.com/macmade/dotfiles/blob/8a19658ed7007a91bb33aa7c69582614344f143c/gitaliases#L321-L322
  #   https://gist.github.com/492227
  head = log -n1

  lost-found = fsck --lost-found
  todo = grep -E '(FIXME|TODO) '

  # Source:
  #   https://github.com/macmade/dotfiles/blob/8a19658ed7007a91bb33aa7c69582614344f143c/gitaliases#L362-L369
  #
  # Find all objects that aren't referenced by any other object (orphans).
  # To help an orphan, we create a new branch with the orphan's commit hash,
  # then merge it into our current branch:
  #
  #    git branch foo <commit>
  #    git merge foo
  #
  orphans = fsck --full

  s = status --short --branch
  st = status

  co  = checkout
  cob = checkout -b

  ls = ls-files
  ls-ignored = ls-files --others --ignored --exclude-standard

  amend     = commit --verbose --amend --no-verify
  amend-now = commit --amend --no-verify --no-edit

  shallow-clone = clone --depth=1

  # Show verbose output about tags and branches
  tags = tag -n1 --list
  branches = branch --all --verbose --verbose

  stash-all = stash push --no-keep-index --include-untracked

  # Source: https://github.com/nvie/git-toolbelt/blob/a4f471e720afcea952308a171d65a6f8217ba59d/git-undo-merge
  undo-merge = reset --hard ORIG_HEAD

  # git gui
  ui = gui

  # Source: https://carolynvanslyck.com/blog/2020/12/git-wip/
  my-branches = for-each-ref --sort='authordate:iso8601' --format=' %(color:green)%(authordate:relative)%09%(color:white)%(refname:short)' refs/heads

[url "https://github.com/"]
  insteadOf = "gh:"

[url "git@github.com:"]
  pushInsteadOf = "gh:"
  insteadOf = "git://github.com/"
  insteadOf = "https://github.com/"

[url "https://gist.github.com/"]
  insteadOf = "gist:"

[url "git@gist.github.com:"]
  pushInsteadOf = "gist:"
  pushInsteadOf = "git://gist.github.com/"

# ------------------------------------------------------------------------------ }}}

# Includes {{{
# ------------------------------------------------------------------------------

[include]
  path = ~/.config/git/config.private
  path = ~/.config/git/config.local
  path = ~/.config/git/config.local.d/*.config

# ------------------------------------------------------------------------------ }}}

# Modeline {{{
# vim: set foldmarker={{{,}}} foldlevel=0 foldmethod=marker : }}}
