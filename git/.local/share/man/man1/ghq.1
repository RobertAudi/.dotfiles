'\" t
.\"     Title: ghq(1) image:https://app.wercker.com/status/529f9ef4a8e48e2634661d7f2da9523f/s/master["wercker status", link="https://app.wercker.com/project/bykey/529f9ef4a8e48e2634661d7f2da9523f"]
.\"    Author: [see the "AUTHOR(S)" section]
.\" Generator: Asciidoctor 1.5.8
.\"      Date: 2017-08-22
.\"    Manual: \ \&
.\"    Source: \ \&
.\"  Language: English
.\"
.TH "GHQ" "1" "2017-08-22" "\ \&" "\ \&"
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.ss \n[.ss] 0
.nh
.ad l
.de URL
\fI\\$2\fP <\\$1>\\$3
..
.als MTO URL
.if \n[.g] \{\
.  mso www.tmac
.  am URL
.    ad l
.  .
.  am MTO
.    ad l
.  .
.  LINKSTYLE blue R < >
.\}
.SH "NAME"
ghq \- Manage remote repository clones
.SH "DESCRIPTION"
.sp
\(aqghq\(aq provides a way to organize remote repository clones, like go get does. When you clone a remote repository by ghq get, ghq makes a directory under a specific root directory (by default ~/.ghq) using the remote repository URL\(cqs host and path.
.sp
.if n .RS 4
.nf
$ ghq get https://github.com/motemen/ghq
# Runs `git clone https://github.com/motemen/ghq ~/.ghq/github.com/motemen/ghq`
.fi
.if n .RE
.sp
You can also list local repositories (ghq list), jump into local repositories (ghq look), and bulk get repositories by list of URLs (ghq import).
.SH "SYNOPSIS"
.sp
.nf
\(aqghq\(aq get [\-u] [\-p] (<repository URL> | <user>/<project> | <project>)
\(aqghq\(aq list [\-p] [\-e] [<query>]
\(aqghq\(aq look (<project> | <path/to/project>)
\(aqghq\(aq import [\-u] [\-p] < FILE
\(aqghq\(aq import <subcommand> [<args>...]
\(aqghq\(aq root [\-\-all]
.fi
.br
.SH "COMMANDS"
.sp
get
.RS 4
Clone a remote repository under ghq root directory (see
DIRECTORY STRUCTURES below). If the repository is
already cloned to local, nothing will happen unless \(aq\-u\(aq (\(aq\-\-update\(aq)
flag is supplied, in which case the local repository is updated (\(aqgit pull \-\-ff\-only\(aq eg.).
When you use \(aq\-p\(aq option, the repository is cloned via SSH protocol.
.br
If there are multiple ghq.root s, existing local clones are searched
first. Then a new repository clone is created under the primary root if
none is found.
.br
With \(aq\-shallow\(aq option, a "shallow clone" will be performed (for Git
repositories only, \(aqgit clone \-\-depth 1 ...\(aq eg.). Be careful that a
shallow\-cloned repository cannot be pushed to remote.
.br
Currently Git and Mercurial repositories are supported.
.RE
.sp
list
.RS 4
List locally cloned repositories. If a query argument is given, only
repositories whose names contain that query text are listed. \(aq\-e\(aq
(\(aq\-\-exact\(aq) forces the match to be an exact one (i.e. the query equals to
\fIproject\fP or \fIuser\fP/\fIproject\fP) If \(aq\-p\(aq (\(aq\-\-full\-path\(aq) is given, the full paths
to the repository root are printed instead of relative ones.
.RE
.sp
look
.RS 4
Look into a locally cloned repository with the shell.
.RE
.sp
import
.RS 4
If no extra arguments given, reads repository URLs from stdin line by line
and performs \(aqget\(aq for each of them.
.br
If given a subcommand name e.g. \(aqghq import <subcommand> [<args>...]\(aq,
ghq looks up a configuration \(aqghq.import.<subcommand>\(aq for a command, invokes
it, and uses its output as URLs list. See below for \(aqghq.import.<subcommand>\(aq
in CONFIGURATION section.
.RE
.sp
root
.RS 4
Prints repositories\(aq root (i.e. \f(CRghq.root\fP). Without \(aq\-\-all\(aq option, the
primary one is shown.
.RE
.SH "CONFIGURATION"
.sp
Configuration uses \(aqgit\-config\(aq variables.
.sp
ghq.root
.RS 4
The path to directory under which cloned repositories are placed. See
DIRECTORY STRUCTURES below. Defaults to ~/.ghq.
.br
This variable can have multiple values. If so, the first one becomes
primary one i.e. new repository clones are always created under it. You may
want to specify "$GOPATH/src" as a secondary root (environment variables
should be expanded.)
.RE
.sp
ghq.<url>.vcs
.RS 4
ghq tries to detect the remote repository\(cqs VCS backend for non\-"github.com"
repositories.  With this option you can explicitly specify the VCS for the
remote repository. The URL is matched against \(aq<url>\(aq using \(aqgit config \-\-get\-urlmatch\(aq.
.br
Accepted values are "git", "github" (an alias for "git"), "subversion",
"svn" (an alias for "subversion"), "git\-svn", "mercurial", "hg" (an alias for "mercurial"),
and "darcs".
.br
To get this configuration variable effective, you will need Git 1.8.5 or higher.
.br
For example in .gitconfig:
.RE
.sp
.if n .RS 4
.nf
[ghq "https://git.example.com/repos/"]
vcs = git
.fi
.if n .RE
.sp
ghq.import.<subcommand>
.RS 4
When \(aqimport\(aq is called with extra arguments e.g. \(aqghq import <subcommand> [<args>...]\(aq,
first of them is treated as a subcommand name and this configuration value
will be used for a command. The command is invoked with rest arguments
and expected to print remote repository URLs line by line.
.br
For example with \c
.URL "https://github.com/motemen/github\-list\-starred" "github\-list\-starred" ":"
.RE
.sp
.if n .RS 4
.nf
# Invoke as `ghq import starred motemen`
[ghq "import"]
starred = github\-list\-starred
.fi
.if n .RE
.sp
ghq.ghe.host
.RS 4
The hostname of your GitHub Enterprise installation. A repository that has a
hostname set with this key will be regarded as same one as one on GitHub.
This variable can have multiple values. If so, \f(CRghq\fP tries matching with
each hostnames.
.br
This option is DEPRECATED, so use "ghq.<url>.vcs" configuration instead.
.RE
.SH "ENVIRONMENT VARIABLES"
.sp
GHQ_ROOT
.RS 4
If set to a path, this value is used as the only root directory regardless
of other existing ghq.root settings.
.RE
.SH "DIRECTORY STRUCTURES"
.sp
Local repositories are placed under \(aqghq.root\(aq with named github.com/\fIuser\fP/\fIrepo\fP.
.sp
.if n .RS 4
.nf
~/.ghq
|\-\- code.google.com/
|   `\-\- p/
|       `\-\- vim/
`\-\- github.com/
    |\-\- google/
    |   `\-\- go\-github/
    |\-\- motemen/
    |   `\-\- ghq/
    `\-\- urfave/
        `\-\- cli/
.fi
.if n .RE
.SH "INSTALLATION"
.sp
.if n .RS 4
.nf
go get github.com/motemen/ghq
.fi
.if n .RE
.sp
Or clone the \c
.URL "https://github.com/motemen/ghq" "repository" " "
and run:
.sp
.if n .RS 4
.nf
make install
.fi
.if n .RE
.SH "AUTHOR"
.sp
motemen <\c
.MTO "motemen\(atgmail.com" "" ">"