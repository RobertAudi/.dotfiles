#!/usr/bin/env xcrun swift
// vim: ft=swift

import Foundation
import AppKit

// MARK: - usage

let usage = "clr2json [-i <path>] [-o <path>]"

let options = [
    "-n": "palette name",
    "-i": "input clr file path",
    "-o": "output json file path",
]

// MARK: - functions

func printUsage() {
    print("Usage: \(usage)\n")
    print("Options:")
    for (option, description) in options {
        print("\t\(option)\t\(description)")
    }
}

// MARK: - options

var inputPath: String!
var outputPath: String!

let arguments = CommandLine.arguments
for i in 0..<arguments.count {
    let argument = arguments[i]
    switch argument {
    case "-i":
        inputPath = (i + 1 < arguments.count) ? arguments[i + 1] : nil
    case "-o":
        outputPath = (i + 1 < arguments.count) ? arguments[i + 1] : nil
    default:
        break
    }
}

if nil == inputPath {
    printUsage()
    exit(0)
}

if nil == outputPath {
    outputPath = "New.json"
}

// MARK: - main

if let colorList = NSColorList(name: "x", fromFile: inputPath) {
    
    var dicts = [[String : String]]()
    
    let keys = colorList.allKeys as [String]
    for key in keys {
        if let color = colorList.color(withKey:key) {
            var colorDict = [String : String]()
            colorDict["name"] = key
            colorDict["r"] = String(format: "%f", Double(color.redComponent))
            colorDict["g"] = String(format: "%f", Double(color.greenComponent))
            colorDict["b"] = String(format: "%f", Double(color.blueComponent))
            colorDict["a"] = String(format: "%f", Double(color.alphaComponent))
			dicts.append(colorDict);

            var output_key = key.replacingOccurrences(of: " ", with: "").lowercased();
			print("const color_t \(output_key) = {\(Int(255 * Double(color.redComponent))), \(Int(255 * Double(color.greenComponent))), \(Int(255 * Double(color.blueComponent)))};");


        }
    }
    for key in keys {
        var output_key = key.replacingOccurrences(of: " ", with: "").lowercased();
        print("\(output_key), ", terminator: "");
    }

	if let jsonData = try? JSONSerialization.data(withJSONObject:dicts, options: .prettyPrinted) {
        let filePath = (outputPath as NSString).expandingTildeInPath
		try? jsonData.write(to:NSURL.fileURL(withPath:filePath), options:NSData.WritingOptions.atomic);
    }
    
}
