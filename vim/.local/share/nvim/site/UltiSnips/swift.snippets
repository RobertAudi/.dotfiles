snippet mark "Mark" b
// MARK: - ${1:Section}
endsnippet

snippet singleton "Singleton" b
static let sharedInstance : ${1:SingletonClass} = ${1}()
endsnippet

snippet "^imp(ort)?" "Import" r
import ${1:Foundation}
endsnippet

snippet let "Constant" b
let ${1}: ${2}
endsnippet

snippet var "Variable" b
var ${1}: ${2}
endsnippet

snippet for "for loop" b
for ${1:i} in ${2:0}..<${3:42} {
	$0
}
endsnippet

snippet forin "for-in loop" b
for case let ${1:Object} in ${2:Collection} as ${3:Type} {
	$0
}
endsnippet

snippet while "while loop" b
while ${1} {
	$0
}
endsnippet

snippet repeat "repeat-while loop" b
repeat {
	$0
} while ${1}
endsnippet

snippet if "if statement" b
if ${1} {
	$0
}
endsnippet

snippet "ife(lse)?" "if-else statement" br
if ${1} {
	$0
} else {

}
endsnippet

snippet "(\}? ?)else" "else statement" br
`!p snip.rv = match.group(1)`else {
	$0
}
endsnippet

snippet "(\}? ?)el(se?)?if" "else-if statement" br
`!p snip.rv = match.group(1)`else if ${1} {
	$0
}
endsnippet

snippet switch "switch statement" b
switch ${1} {
	$0
}
endsnippet

snippet guard "guard statement" b
guard ${1} else { ${2:fatalError()} }
endsnippet

snippet "fun(c|ction)?" "Function" br
func ${1:name}(${2}) ${3:-> ()} {
	$0
}
endsnippet

snippet f "Closure" w
{ (${1}) -> ${2:()} in
	$0
}
endsnippet

snippet "cla(ss?)?" "Class" br
class ${1:Name} {
	$0
}
endsnippet

snippet struct "Struct" b
struct ${1:Name} {
	$0
}
endsnippet

snippet "ext(ension)?" "Extension" br
extension ${1:Name}: ${2:Type} {
	$0
}
endsnippet

snippet "proto(col)?" "Protocol" br
protocol ${1:Name} {
	$0
}
endsnippet

snippet enum "Enumeration" b
enum ${1:Name} {
	$0
}
endsnippet

snippet init "init()" b
init() {
	${1:super.init()}
}
endsnippet

snippet "(\}? ?)catch" "catch clause" br
`!p snip.rv = match.group(1)`catch ${1} {
	$0
}
endsnippet

snippet "try catch" "do-try-catch block" b
do {
	try $0
} catch ${1} {
	// ...
}
endsnippet

snippet "@?ibo(utlet)?" "@IBOutlet" br
@IBOutlet weak var ${1}: ${2:Type}?
endsnippet

snippet "@?iba(ction)?" "@IBAction" br
@IBAction func ${1}(_ sender: ${2:Any}) {
	$0
}
endsnippet

snippet loc "Localized string" b
NSLocalizedString(${1:key}, value: ${2:value}, comment: ${3:comment})
endsnippet

snippet #if "#if compilation directive" b
#if ${1}
	$0
#endif
endsnippet

snippet #ife "#if-#else compilation directive" b
#if ${1}
	$0
#else
	// ...
#endif
endsnippet

snippet #ifeif "#if-#elseif-#else compilation directive" b
#if ${1}
	$0
#elseif ${2}
	// ...
#else
	// ...
#endif
endsnippet
