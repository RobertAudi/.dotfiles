snippet header "standard Vim script file header" b
" File: ${1:`!v expand('%:t')`}
" Author: ${2}
" Description: ${3}
${0:" Last Modified: `!v strftime("%B %d, %Y")`}
endsnippet

snippet "\bfun(c|ction)?" "function" r
function! ${1:function_name}(${2})
	${3:" code}
endfunction
endsnippet

context "int(vim.eval('expand(\'%:h\') =~# \'autoload\''))"
snippet "\bfun(c|ction)?" "function" r
function! ${1:`!v tr(substitute(expand('%:r'), '.*autoload/', '', ''), '/', '#') . '#'`}${2:function_name}(${3}) abort
	${4:" code}
endfunction
endsnippet

snippet for "for...in loop" b
for ${1} in ${2}
	${0}
endfor
endsnippet

snippet while "while loop" b
while ${1}
	${0}
endwhile
endsnippet

snippet if "if statement" b
if ${1}
	${0}
endif
endsnippet

snippet ife "if...else statement" b
if ${1}
	${2}
else
	${0}
endif
endsnippet

snippet "\baug(roup)?" "augroup block" r
augroup ${1:AU_NAME}
	autocmd!
	${0}
augroup END
endsnippet

snippet "\bau(tocmd)?" "autocommand" r
autocmd ${1:BufEnter} ${2:*} ${3}  set visualbell t_vb=
endsnippet

context "int(vim.eval('expand(\'%:h\') =~# \'ftdetect\''))"
snippet "\bau(tocmd)?" "ftdetect autocommand" re
autocmd BufRead,BufNewFile ${1} setlocal filetype=${2}
endsnippet

snippet "^\s*plug(in)?" "vim-plug plugin definition" r
Plug '`!v getreg('+') == '' ? '<\`0\`>' : substitute(getreg('+'), '^https\?:\/\/github\.com\/', '', '')`'${0}
endsnippet

snippet gvar "Global / configuration variable" b
if !exists("g:${1:MyUltraImportantVar}")
	let g:$1 = ${2:"${3:<tab>}"}
endif
endsnippet

snippet guard "script reload guard" b
if exists('${1:did_`!p snip.rv = snip.fn.replace('.','_')`}') || &cp${2: || version < 700}
	finish
endif
let $1 = 1${3}
endsnippet
