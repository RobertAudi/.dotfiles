#autoload

typeset -ga _UPDATE_CUSTOM_ENV_VARIABLES

typeset -gA _UPDATE_PACKAGE_MANAGERS
_UPDATE_PACKAGE_MANAGERS[pip]="pip\tUpdate outdated pip2 and pip3 packages"
_UPDATE_PACKAGE_MANAGERS[npm]="npm\tUpdate outdated npm packages"
_UPDATE_PACKAGE_MANAGERS[nvim]="nvim\tUpdate Neovim plugins"
_UPDATE_PACKAGE_MANAGERS[zsh]="zsh\tUpdate ZSH plugins"

if is_macos; then
  _UPDATE_PACKAGE_MANAGERS[macos]="macos\tUpdate macOS and Mac App Store apps"
  _UPDATE_PACKAGE_MANAGERS[brew]="brew\tUpdate Homebrew and Cask packages"

  _UPDATE_CUSTOM_ENV_VARIABLES+="LDFLAGS=-L/usr/local/opt/openssl/lib"
  _UPDATE_CUSTOM_ENV_VARIABLES+="CPPFLAGS=-I/usr/local/opt/openssl/include"
  _UPDATE_CUSTOM_ENV_VARIABLES+="PKG_CONFIG_PATH=/usr/local/opt/openssl/lib/pkgconfig"
fi

typeset -gA _UPDATE_SUBCOMMANDS
_UPDATE_SUBCOMMANDS[all]="all\tUpdate everything"
_UPDATE_SUBCOMMANDS[list]="list\tList all commands"
_UPDATE_SUBCOMMANDS[help]="help\tDisplay this text and exit"

typeset -gA _UPDATE_OPTIONS
_UPDATE_OPTIONS[all]="-a, --all\tExecute all commands sets"
_UPDATE_OPTIONS[list]="-l, --list\tList all commands"
_UPDATE_OPTIONS[help]="-h, --help\tDisplay this text and exit"

function __update::commands::list::subcommands {
  print -l -- "${(o)_UPDATE_SUBCOMMANDS[@]}" | awk -F '\t' '{ printf "%-14s %s\n", $1, $2 }'
}

function __update::commands::list::package-managers {
  print -l -- "${(o)_UPDATE_PACKAGE_MANAGERS[@]}" | awk -F '\t' '{ printf "%-14s %s\n", $1, $2 }'
}

function __update::commands::list::options {
  print -l -- "${_UPDATE_OPTIONS[@]}" | awk -F '\t' '{ printf "%-14s %s\n", $1, $2 }'
}

function __update::help::usage {
  print -- "usage: update [OPTIONS] [COMMANDS]"
  print
}

function __update::help::commands {
  print -- "COMMANDS:"
  __update::commands::list::package-managers | pr -to2
  print
  __update::commands::list::subcommands | pr -to2
  print
}

function __update::help::package-managers {
  print -- "COMMANDS:"
  __update::commands::list::package-managers | pr -to2
  print
}

function __update::help::options {
  print -- "OPTIONS:"
  __update::commands::list::options | pr -to2
  print
}

function __update::help::print {
  __update::help::usage
  __update::help::options
  __update::help::commands
  return 0
}

function __update::utils::log::separator {
  local word
  (( $# > 0 )) && word="$@" || word="━"
  builtin print -Pn -- "%B%F{019}"
  hr "$word"
  builtin print -Pn -- "%f%b"
}

function __update::utils::log::info {
  builtin print -P -- "%F{032}==>%f $@"
}

function __update::utils::log::error {
  builtin print -P -- "%F{196}!!!%f $@" >&2
  return 1
}

function __update::utils::errors::command-not-found {
  __update::utils::log::error "Command not found: \\\\\`$1'"
  return 127
}

function __update::utils::errors::invalid-option {
  __update::utils::log::error "Invalid option: \\\\\`$1'"
  return 129
}

function __update::commands::npm {
  # update NPM first
  command npm install --global npm

  for package in $(command npm --global outdated --parseable --depth=0 | cut -d: -f2); do
    command npm --global install "$package"
  done
}

function __update::commands::zsh {
  if is-callable zplugin; then
    __update::utils::log::info "zplugin self-update"
    zplugin self-update > /dev/null

    __update::utils::log::info "zplugin update --all"
    zplugin update --all --quiet > /dev/null

    __update::utils::log::info "zplugin compile --all"
    zplugin compile --all > /dev/null
  fi
}

function __update::commands::nvim {
  if is-callable nvim; then
    nvim -e +PlugInstall +PlugUpgrade +PlugUpdate +PlugClean! +qall &>/dev/null
  fi
}

function __update::commands::macos {
  if ! is_macos; then
    unfunction __update::commands::macos
    __update::utils::errors::command-not-found "macos"
    return $status
  fi

  __update::utils::log::info "softwareupdate --install --all"
  softwareupdate --install --all

  if is-callable mas; then
    __update::utils::log::info "mas upgrade"
    mas upgrade
  fi
}

function __update::commands::brew {
  if ! is_macos; then
    unfunction __update::commands::brew
    __update::utils::errors::command-not-found "brew"
    return $status
  fi

  __update::utils::log::separator
  __update::utils::log::info "brew update"
  __update::utils::log::separator "⋅"
  command brew update

  builtin print
  __update::utils::log::separator
  __update::utils::log::info "brew upgrade --display-times"
  __update::utils::log::separator "⋅"
  command brew upgrade

  builtin print
  __update::utils::log::separator
  __update::utils::log::info "brew cask upgrade"
  __update::utils::log::separator "⋅"
  command brew cask upgrade

  builtin print
  __update::utils::log::separator
  __update::utils::log::info "brew cleanup -s --prune-prefix"
  __update::utils::log::separator "⋅"
  command brew cleanup -s --prune-prefix

  builtin print
}

function __update::commands::pip {
  local env_vars="${(j: :)_UPDATE_CUSTOM_ENV_VARIABLES}"

  __update::utils::log::info "pip install --upgrade --upgrade-strategy eager --progress-bar pretty pip setuptools wheel"
  env $=env_vars pip install --upgrade --upgrade-strategy eager --progress-bar pretty pip setuptools wheel || return $status

  local outdated_packages="$(pip list --outdated --format freeze | cut -d'=' -f1 | tr '\n' ' ')"

  if [[ -z "$outdated_packages" ]]; then
    __update::utils::log::info "No outdated pip packages"
    return
  fi

  __update::utils::log::info "pip install --upgrade --upgrade-strategy eager --progress-bar pretty \"$outdated_packages\""
  env $=env_vars pip install --upgrade --upgrade-strategy eager --progress-bar pretty $=outdated_packages
}

function __update::run-command {
  if ((${(k)+_UPDATE_SUBCOMMANDS[$1]})) || ((${(k)+_UPDATE_PACKAGE_MANAGERS[$1]})); then
    __update::utils::log::info "$1"
    eval __update::commands::$1 || return $status
  else
    __update::utils::errors::command-not-found "$1"
    print
    __update::help::package-managers
    return 129
  fi
  __update::utils::log::separator
}

function __update::run-commands {
  local -a cmds
  if (( $# > 0 )); then
    cmds=($@)
  else
    cmds=(${(ko)_UPDATE_PACKAGE_MANAGERS[@]})
  fi

  local cmd
  for cmd in ${cmds[@]}; do
    __update::run-command $cmd || return $status
  done
}

###

function update {
  if (( $# == 0 )); then
    __update::help::print
    return $status
  fi

  zparseopts -D l+=list -list+=list h+=help -help+=help a+=all -all+=all

  (( $#list > 0 )) && { update list ; return $status }
  (( $#help > 0 )) && { update help ; return $status }
  (( $#all > 0 ))  && { update all  ; return $status }

  case "$1" in
    help)
      __update::help::print
      return $status;;

    list)
      __update::help::package-managers
      return 0;;

    all)
      __update::run-commands
      return $status;;

    -*)
      __update::utils::errors::invalid-option "$1" ; print
      __update::help::print
      return 129;;

    *)
      __update::run-commands "$@"
      return $status;;
  esac
}

update "$@"
